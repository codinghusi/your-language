import { Name } from './name.yl';

decl operands => choose('+', '-', '*', '/');
decl updateOperands => choose('++', '--');
decl unaryOperands => choose('+', '-', '!');

nodes Value {
    node String {
        // once quote evaluated one path (" or ') it can't be changed
        const quote => choose('"', "'");
        describe() => quote
                   -> value: loop(/./, '\\')
                   -> quote;
    }

    node Number {
        describe() => value: /\d+(\.\d+)/;
    }
}

nodes Expression {
    link Value;

    node Member {
        describe() => object: Expression()
                   -> "."
                   -> property: Name();
    }

    node Call {
        describe() => callee: Expression()
                   -> "("
                   -> arguments: delimited(Expression, whitespaced(","))
                   -> ")";
    }

    node Binary {
        describe() => left: Expression()
                   -> operator: operands
                   -> right: Expression();
    }

    node Update {
        // keys with $ are just internal captures

        describe() => choose(
            (prefix: true) => operator: updateOperands()
                           ~> $ts123: whitespace()
                           -> argument: Name(),

            (prefix: false) => argument: Name()
                            ~> $ts123: whitespace()
                            -> operator: updateOperands()
        );
        // example: { type: "UpdateExpressionNode", prefix: "true", operator: "++", argument: {...} }

        // print a warning if there's a whitespace
        case($ts123) {
            warn("TS123", "Remove whitespace between '${operand}' and expression);
        }
    }

    node Unary {
        describe() => operator: unaryOperands()
                   -> argument: Expression();
    }

}

